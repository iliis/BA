%% NOTES

IDEAS

> 'direct' least squares solution?

> least squares in 3D space instead of rendering onto images
  + no odd artefacts from projecting onto image
  + no loss of points that fall outside image
    - they don't matter/help in 3D case either...
  - minimize what exactly? color difference between closest points?
  - need depth images for all frames
    + we should get them anyway from the FPGA
  --> Turns out this doesn't work as well, as error terms get a lot more complicated (can't just assume simple gaussians)



OBSERVATIONS

> F*ck gamma correction
  - there might be a bug in Blender

> lsqnonlin needs quite big DiffMinChange but still gets stuck in local minima (at least without Jacobian)


QUESTIONS

> How to delete element in matrix? I.e. mark it as invalid/non-existing?


TODO

> implement full Jacobi
  - derive differentials for functions seperately and manually combine them using chain rule
  - use gauss-newton instead of lsqnonlin

> optimize away some for loops

> generate more test footage
  - with more geometry
  - try to use real camera

> exact deadline date
