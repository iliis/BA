%% NOTES

DEADLINE

15.6.2015

IDEAS

> 'direct' least squares solution?

> least squares in 3D space instead of rendering onto images
  + no odd artefacts from projecting onto image
  + no loss of points that fall outside image
    - they don't matter/help in 3D case either...
  - minimize what exactly? color difference between closest points?
  - need depth images for all frames
    + we should get them anyway from the FPGA
  --> Turns out this doesn't work as well, as error terms get a lot more complicated (can't just assume simple gaussians)



OBSERVATIONS

> F*ck gamma correction
  - there might be a bug in Blender

> lsqnonlin needs quite big DiffMinChange but still gets stuck in local minima (at least without Jacobian)

> Global minima can sometimes be a litte of of 'true' solution!

> Warping can lead to holes between pixels, resulting in background 'shining trough'
  -> this increases error for true solution
  -> add some sort of filtering when rendering warped image?


TODO

> implement full Jacobi
 - unit test with finite differences
 - plot derivation of sum(errs.^2)

> optimize away some for loops

> generate more test footage
  - with more geometry
  - try to use real camera

> organize code somewhat
  - tests, plots, actual_math, ...




max. movement: 10cm for now

alles dokumentieren! alle zwischenschritte!

jacobi berechnen: nicht null, rausnehmen! halt auch ausm error term

refactor jacobi berechnung so dass es einfach testbar ist

Gauss Newton: Kann divergieren wenn nicht positiv semi-definit -> Schrittgrösse limitieren (Levenberg-Marquart)
(J'WJ+l*I)*deltaT = -J*W*e(T)
-> l grösser machen wenn aktueller Schritt Fehler nicht verkleinert

Kostenfunktion: Huber (maybe try others)





29.5:
- weg mit minuszeichen
    -> Blender script
- check image gradient

TODO MATLAB:
- write tests for all core functions, including camera_warp()
- fix Blender script
- render more cost surfaces
    -> also with weighted errors
- render longer trajectory
    - with more surrounding geometry

TODO BLENDER:
- link common stuff from external .blend files (such as node layout and python scripts)
- fix export script to handle camera's parented to other stuff (such as following a path)


IDEAS

> measure convergence radius for trajectory
    - determine how much offset can be tolerated
    -> required framerate / movement speed


8.6:
- check all scenes (and all steps, trajectory1/20 was wrong)
    -> switch to 8bit PNG due to SFML
- fix c++ code on single screen -.-
    -> kernel update -> reinstall ATI drivers
- debug jacobians !!!
